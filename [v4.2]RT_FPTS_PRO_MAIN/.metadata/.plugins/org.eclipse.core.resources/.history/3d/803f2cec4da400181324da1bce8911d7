/*****************头文件********************/ 
#include <string.h>
#include "DSP2833x_Device.h"     
#include "DSP2833x_Examples.h"   

#pragma DATA_SECTION(ParaTable,".ParaTab")
struct PARAMETER_REGS ParaTable;

extern enum   SYSTEM_STATE 	SystemState;
extern union  FLAG_SYSTEM   FlagSystem;
/*---------------------------------------------------------------------
函数原型：ReadParaFromFlash
函数名称：read the parameter from the flash;
if the flash is not empty, then read the parameter from the flash and then run;
函数功能：
入口参数：无
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void ReadParaFromFlash(void)
{
	int *ParPoint;
	ParPoint = (int *)&ParaTable;					//获取参数表的首地址；
	FlashRead(ParPoint,0x0,sizeof(ParaTable));		//从flash读取整个参数表；
}

/*---------------------------------------------------------------------
函数原型：WtiteDefaultToFlash
函数名称：初始化整个参数表，将参数表写入flash
函数功能：
入口参数：无
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
#ifdef 250A_EQUIPMENT
void WtiteDefaultToFlash(void)
{
	int *ParPoint;

	ParPoint = (int *)&ParaTable;
	memset(&ParaTable,0x00,sizeof(ParaTable));

	// 常规参数设计
	ParaTable.PowerReg.uNO1PowerType 		= 0;
	ParaTable.PowerReg.uNO1PowerFre 		= 500;			// 主路输入电源额定频率 0.1Hz
	ParaTable.PowerReg.uNO1PowerVol		    = 3800;			// 主路输入电源额定电压 0.1V
//	ParaTable.PowerReg.uNO1PowerCur		    = 2500;			// 主路输入电源额定电流 0.1A,Irms
    ParaTable.PowerReg.uNO1PowerCur         = 4000;         // 主路输入电源额定电流 0.1A,Irms

	ParaTable.PowerReg.uNO2PowerType 		= 0;
	ParaTable.PowerReg.uNO2PowerFre 		= 500;			// 辅路输入电源额定频率
	ParaTable.PowerReg.uNO2PowerVol		    = 3800;			// 辅路输入电源额定电压
//	ParaTable.PowerReg.uNO2PowerCur		    = 2500;			// 辅路输入电源额定电流
	ParaTable.PowerReg.uNO2PowerCur         = 4000;         // 辅路输入电源额定电流

	ParaTable.PowerReg.uOutPowerType 		= 0;
	ParaTable.PowerReg.uOutPowerFre 		= 500;			// 输出路输入电源额定频率
	ParaTable.PowerReg.uOutPowerVol		    = 3800;			// 输出路输入电源额定电压
//	ParaTable.PowerReg.uOutPowerCur		    = 2500;			// 输出路输入电源额定电流
	ParaTable.PowerReg.uOutPowerCur         = 4000;         // 输出路输入电源额定电流

	ParaTable.PowerReg.uModATemp			= 600;			// A相正常温度
	ParaTable.PowerReg.uModBTemp			= 600;			// B相正常温度
	ParaTable.PowerReg.uModCTemp			= 600;			// C相正常温度

	ParaTable.PowerReg.uParaTableVer		= 1;			// 初始化为1
    ParaTable.PowerReg.uHardwareVer         = 42;           // 硬件版本号，针对V4.2版本
	ParaTable.PowerReg.uSoftwareVer		    = 18051;		// 软件版本号，xx年xx月第x次修改

	// SPLL的PI参数设计
	ParaTable.PIReg.uNO1Kp					= 1024;			// Q12
	ParaTable.PIReg.uNO1Ki					= 10;			// Q12
	ParaTable.PIReg.uNO1Kd 					= 10; 			// Q12
	ParaTable.PIReg.uNO1PIMax				= 4000; 			// Q12
	ParaTable.PIReg.uNO1PIMin				= -4000; 		// Q12

	ParaTable.PIReg.uNO2Kp 					= 1024; 		// Q12
	ParaTable.PIReg.uNO2Ki 					= 10;			// Q12
	ParaTable.PIReg.uNO2Kd 					= 10;			// Q12
	ParaTable.PIReg.uNO2PIMax 				= 4000;			// Q12
	ParaTable.PIReg.uNO2PIMin 				= -4000; 		// Q12

	ParaTable.PIReg.uOutKp 					= 1024; 		// Q12
	ParaTable.PIReg.uOutKi 					= 10;			// Q12
	ParaTable.PIReg.uOutKd 					= 10;			// Q12
	ParaTable.PIReg.uOutPIMax 				= 4000;			// Q12
	ParaTable.PIReg.uOutPIMin 				= -4000; 		// Q12

	// 运行控制参数默认值
	ParaTable.RunCtrlReg.XSMaxNO1Vol		= 6094;			// AD:0~3V， 2.5mA * 240K，单位0.1V
	ParaTable.RunCtrlReg.XSMaxNO2Vol		= 6094;			//
	ParaTable.RunCtrlReg.XSMaxOutVol		= 6000;			//
	ParaTable.RunCtrlReg.XSMaxNO1Cur		= 5000;			// AD:0~3V, 3V-500A，单位0.1A
	ParaTable.RunCtrlReg.XSMaxNO2Cur		= 5000;			//
	ParaTable.RunCtrlReg.XSMaxModATemp		= 1312;			// Is:4mA~20mA,AD:0~3V, 3V-131.2℃，单位0.1℃
	ParaTable.RunCtrlReg.XSMaxModBTemp		= 1312;			//
	ParaTable.RunCtrlReg.XSMaxModCTemp		= 1312;			//

	ParaTable.RunCtrlReg.uNO1VolLower		= 3686;			// 输入电压低压保护值 Q12 342v-- 90%380V
	ParaTable.RunCtrlReg.uNO1VolUpper		= 4505;			// 输入电压高压保护值 Q12 418v--110%380V
	ParaTable.RunCtrlReg.uNO1CurAlarm		= 4505;			// 过流报警值 		 Q12 250A * 1.1
	ParaTable.RunCtrlReg.uNO1CurCut			= 5324;			// 过流切断值		 Q12 250A * 1.3
	ParaTable.RunCtrlReg.uNO1VolUpDelay		= 1000;			// 输入高压保护延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO1VolLowDelay	= 1000;			// 输入低压保护延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO1CurAlarmDelay	= 1000;			// 输出过流报警延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO1CurCutDelay	= 100;			// 输出过流切断延时值  3ms * 1000 	= 3s

	ParaTable.RunCtrlReg.uNO2VolLower	    = 3686;			// 输入电压低压保护值 Q12 342v-- 90%380V
	ParaTable.RunCtrlReg.uNO2VolUpper		= 4505;			// 输入电压高压保护值 Q12 418v--110%380V
	ParaTable.RunCtrlReg.uNO2CurAlarm		= 4505;			// 过流报警值 		Q12 250A * 1.1
	ParaTable.RunCtrlReg.uNO2CurCut			= 5324;			// 过流切断值		Q12 250A * 1.3
	ParaTable.RunCtrlReg.uNO2VolUpDelay		= 1000;			// 输入高压保护延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO2VolLowDelay	= 1000;			// 输入低压保护延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO2CurAlarmDelay	= 1000;			// 输出过流报警延迟值  3ms * 1000 	= 3s
	ParaTable.RunCtrlReg.uNO2CurCutDelay	= 100;			// 输出过流切断延时值  3ms * 1000 	= 3s

    ParaTable.RunCtrlReg.uFanOpenTemp       = 350;          // 风扇开启温度值      35.0℃
    ParaTable.RunCtrlReg.uTempAlarm         = 750;          // 温度报警值             75.0℃
    ParaTable.RunCtrlReg.uTempCut           = 1000;         // 温度切断                 100.0℃

    // 传感器系数控制参数组
    ParaTable.ADCoefReg.uCoefNO1Ia          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO1Ib          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO1Ic          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO2Ia          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO2Ib          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO2Ic          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO1Uab         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO1Ubc         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO2Uab         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefNO2Ubc         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefOutUab         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefOutUbc         = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefTempA          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefTempB          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefTempC          = 4096;         // Q12
    ParaTable.ADCoefReg.uCoefrsvd           = 4096;         // Q12

    // 重要数据保存参数组 64
	ParaTable.EmergencyReg.uEmDataSize      = 128;          // 重要数据存储区域大小128K
	ParaTable.EmergencyReg.uEmDataNumMax    = 8;            // 重要数据最大存储个数8个
	ParaTable.EmergencyReg.uEmDataSaveTime  = 16 * 1024 / 3600; // 重要数据保存时间 4.55s
    ParaTable.EmergencyReg.uEmData0Addr     = 1;
    ParaTable.EmergencyReg.uEmData1Addr     = 2;
    ParaTable.EmergencyReg.uEmData2Addr     = 3;
    ParaTable.EmergencyReg.uEmData3Addr     = 4;
    ParaTable.EmergencyReg.uEmData4Addr     = 5;
    ParaTable.EmergencyReg.uEmData5Addr     = 6;
    ParaTable.EmergencyReg.uEmData6Addr     = 7;
    ParaTable.EmergencyReg.uEmData7Addr     = 8;

	SectorErase(0x00);
	DelayUs(1000);
	FlashWrite(ParPoint,0x00,sizeof(ParaTable));					// 整个参数表写入flash；
}

/*---------------------------------------------------------------------
函数原型：
函数名称：
函数功能：更新被修改的参数到flash;
入口参数：无
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
int UpdataParaToFlash(void)
{
	//判断在未运行并且参数被修改时，将整个参数表写入flash
	if ((SystemState != SystemRun) && (FlagSystem.bit.ParaDataChg == 1))
	{
		FlagSystem.bit.ParaDataChg = 0;
		SectorErase(0x00);

		FlashWrite((int *)&ParaTable, 0x00, sizeof(ParaTable));		//整个参数表写入flash；
		return 1;
	}
	return 0;
}


