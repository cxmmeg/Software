// TI File $Revision: /main/6 $
// Checkin $Date: May 7, 2007   16:26:05 $
//###########################################################################
//
// FILE:	DSP2833x_ECan.c
//
// TITLE:	DSP2833x Enhanced CAN Initialization & Support Functions.
//
//###########################################################################
// $TI Release: DSP2833x Header Files V1.01 $
// $Release Date: September 26, 2007 $
//###########################################################################

#include "DSP2833x_Device.h"     // DSP28 Headerfile Include File
#include "DSP2833x_Examples.h"   // DSP28 Examples Include File

/***************全局变量定义****************/
struct ECAN_REGS ECanbShadow;

extern union 	FLAG_GPIOIN   	 		FlagGpioIn;
extern union  	FLAG_SYSTEM_INITERR 	FlagSysInitErr;
extern union  	FLAG_SYSTEM_RUNERR 		FlagSysRunErr;
extern union  	FLAG_SYSTEM_ALARM		FlagSysAlarm;
extern union  	FLAG_SYSTEM				FlagSystem;
extern union  	STATE_SYSTEM			StateSystem;
extern struct 	COUNT_SYSTEM			CountSystem;
extern struct   PWMISR_REGS             PwmIsrReg;

extern struct 	CANFRAME  				CanTxPack1;		//发送数据包，暂时没有做FIFO
extern struct 	CANFRAME  				CanTxPack2;		//发送数据包，暂时没有做FIFO
extern struct 	CANFRAME  				CanRxPack;		//接收到的数据包，暂时没有做FIFO

void InitCANDATA(void);

void InitECanaGpio(Uint16 ch)
{
	EALLOW;
	if(0 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO18 = 0;	    // Enable pull-up for GPIO18 (CANRXA)
		GpioCtrlRegs.GPAPUD.bit.GPIO19 = 0;	    // Enable pull-up for GPIO19 (CANTXA)
		GpioCtrlRegs.GPAQSEL2.bit.GPIO18 = 3;   // Asynch qual for GPIO18 (CANRXA)
		GpioCtrlRegs.GPAMUX2.bit.GPIO18 = 3;	// Configure GPIO18 for CANRXA operation
		GpioCtrlRegs.GPAMUX2.bit.GPIO19 = 3;	// Configure GPIO19 for CANTXA operation
	}
	else if(1 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO30 = 0;	    // Enable pull-up for GPIO30 (CANRXA)
		GpioCtrlRegs.GPAPUD.bit.GPIO31 = 0;	    // Enable pull-up for GPIO31 (CANTXA)
	    GpioCtrlRegs.GPAQSEL2.bit.GPIO30 = 3;   // Asynch qual for GPIO30 (CANRXA)
		GpioCtrlRegs.GPAMUX2.bit.GPIO30 = 1;	// Configure GPIO30 for CANRXA operation
		GpioCtrlRegs.GPAMUX2.bit.GPIO31 = 1;	// Configure GPIO31 for CANTXA operation
	}
    EDIS;
}

void InitECanbGpio(Uint16 ch)
{
	EALLOW;
	if(0 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO8 = 0;	  // Enable pull-up for GPIO8  (CANTXB)
		GpioCtrlRegs.GPAPUD.bit.GPIO10 = 0;	  // Enable pull-up for GPIO10 (CANRXB)
		GpioCtrlRegs.GPAQSEL1.bit.GPIO10 = 3; // Asynch qual for GPIO10 (CANRXB)
		GpioCtrlRegs.GPAMUX1.bit.GPIO8 = 2;   // Configure GPIO8 for CANTXB operation
		GpioCtrlRegs.GPAMUX1.bit.GPIO10 = 2;  // Configure GPIO10 for CANRXB operation
	}
	else if(1 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO12 = 0;   // Enable pull-up for GPIO12 (CANTXB)
		GpioCtrlRegs.GPAPUD.bit.GPIO13 = 0;   // Enable pull-up for GPIO13 (CANRXB)
		GpioCtrlRegs.GPAQSEL1.bit.GPIO13 = 3; // Asynch qual for GPIO13 (CANRXB)
		GpioCtrlRegs.GPAMUX1.bit.GPIO12 = 2;  // Configure GPIO12 for CANTXB operation
		GpioCtrlRegs.GPAMUX1.bit.GPIO13 = 2;  // Configure GPIO13 for CANRXB operation
	}
	else if(2 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO16 = 0;   // Enable pull-up for GPIO16 (CANTXB)
		GpioCtrlRegs.GPAPUD.bit.GPIO17 = 0;   // Enable pull-up for GPIO17 (CANRXB)
		GpioCtrlRegs.GPAQSEL2.bit.GPIO17 = 3; // Asynch qual for GPIO17 (CANRXB)
		GpioCtrlRegs.GPAMUX2.bit.GPIO16 = 2;  // Configure GPIO16 for CANTXB operation
		GpioCtrlRegs.GPAMUX2.bit.GPIO17 = 2;  // Configure GPIO17 for CANRXB operation
	}
	else if(3 == ch)
	{
		GpioCtrlRegs.GPAPUD.bit.GPIO20 = 0;   // Enable pull-up for GPIO20 (CANTXB)
		GpioCtrlRegs.GPAPUD.bit.GPIO21 = 0;   // Enable pull-up for GPIO21 (CANRXB)
		GpioCtrlRegs.GPAQSEL2.bit.GPIO21 = 3; // Asynch qual for GPIO21 (CANRXB)
		GpioCtrlRegs.GPAMUX2.bit.GPIO20 = 3;  // Configure GPIO20 for CANTXB operation
		GpioCtrlRegs.GPAMUX2.bit.GPIO21 = 3;  // Configure GPIO21 for CANRXB operation
	}
    EDIS;
}

/*---------------------------------------------------------------------
函数原型：void IniteCANB(void)
函数名称：初始化eCAN模块
函数功能：
入口参数：无                 
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void IniteCANB(void)
{
	InitECanbGpio(2);

	/* Configure eCAN RX and TX pins for eCAN transmissions using eCAN regs*/
	EALLOW;
	ECanbShadow.CANTIOC.all = ECanbRegs.CANTIOC.all;
	ECanbShadow.CANTIOC.bit.TXFUNC = 1;
	ECanbRegs.CANTIOC.all = ECanbShadow.CANTIOC.all;

	ECanbShadow.CANRIOC.all = ECanbRegs.CANRIOC.all;
	ECanbShadow.CANRIOC.bit.RXFUNC = 1;
	ECanbRegs.CANRIOC.all = ECanbShadow.CANRIOC.all;
	EDIS;

	/* Configure eCAN for ECAN mode:29位地址 */
	EALLOW;
	ECanbShadow.CANMC.all = ECanbRegs.CANMC.all;
	ECanbShadow.CANMC.bit.SCB = 1;
	ECanbRegs.CANMC.all = ECanbShadow.CANMC.all;
	EDIS;

	/* Initialize all bits of ’Master Control Field’ to zero */
	ECanbMboxes.MBOX0.MSGCTRL.all = 0x00000000;
	ECanbMboxes.MBOX30.MSGCTRL.all = 0x00000000;
	ECanbMboxes.MBOX31.MSGCTRL.all = 0x00000000;

	// TAn, RMPn, GIFn bits are all zero upon reset and are cleared again
	ECanbRegs.CANTA.all 	= 0xFFFFFFFF;
	ECanbRegs.CANRMP.all 	= 0xFFFFFFFF;
	ECanbRegs.CANGIF0.all 	= 0xFFFFFFFF;
	ECanbRegs.CANGIF1.all 	= 0xFFFFFFFF;

	/* Configure bit timing parameters */
	EALLOW;
	ECanbShadow.CANMC.all = ECanbRegs.CANMC.all;
	ECanbShadow.CANMC.bit.CCR = 1 ;				// Set CCR = 1
	ECanbRegs.CANMC.all = ECanbShadow.CANMC.all;
	EDIS;

	while(ECanbShadow.CANES.bit.CCE != 1 )
	{
		ECanbShadow.CANES.all = ECanbRegs.CANES.all;
	} 	// Wait for CCE bit to be set..
	
	EALLOW;
	ECanbShadow.CANBTC.all = ECanbRegs.CANBTC.all;
	ECanbShadow.CANBTC.bit.BRPREG 		= 19;    //19: 250KHz; 39:125KHZ
	ECanbShadow.CANBTC.bit.TSEG2REG 	= 4;
	ECanbShadow.CANBTC.bit.TSEG1REG 	= 8;
	ECanbShadow.CANBTC.bit.SJWREG     	= 2;
	ECanbRegs.CANBTC.all = ECanbShadow.CANBTC.all;
	EDIS;

	EALLOW;
	ECanbShadow.CANMC.all = ECanbRegs.CANMC.all;
	ECanbShadow.CANMC.bit.CCR = 0 ;				// Set CCR = 0
	ECanbRegs.CANMC.all = ECanbShadow.CANMC.all;
	EDIS;

	while(ECanbShadow.CANES.bit.CCE != 0 )
	{
		ECanbShadow.CANES.all = ECanbRegs.CANES.all;
	} // Wait for CCE bit to be cleared..

	/* Disable all Mailboxes */
	ECanbRegs.CANME.all = 0x00000000; 			// 禁止所有的邮箱

	ECanbShadow.CANTRR.all = ECanbRegs.CANTRR.all;
    ECanbRegs.CANTRR.bit.TRR0   = 1;   			//请求复位邮箱0；
    ECanbRegs.CANTRR.bit.TRR30  = 1;   			//请求复位邮箱30；
    ECanbRegs.CANTRR.bit.TRR31  = 1;   			//请求复位邮箱31；
    ECanbRegs.CANTRR.all = ECanbShadow.CANTRR.all;

    while(ECanbShadow.CANTRS.bit.TRS0==1)  {ECanbShadow.CANTRS.all = ECanbRegs.CANTRS.all;}
    while(ECanbShadow.CANTRS.bit.TRS30==1) {ECanbShadow.CANTRS.all = ECanbRegs.CANTRS.all;}
    while(ECanbShadow.CANTRS.bit.TRS31==1) {ECanbShadow.CANTRS.all = ECanbRegs.CANTRS.all;}

	/* Write to the MSGID field */
    ECanbMboxes.MBOX0.MSGID.all = 0x80000000;  // 发送邮箱地址；

	/* Configure Mailbox under test as a Transmit mailbox */
	ECanbShadow.CANMD.all = ECanbRegs.CANMD.all; 
	ECanbShadow.CANMD.bit.MD0 = 0;            //设置为发送邮箱；
	ECanbRegs.CANMD.all = ECanbShadow.CANMD.all;

	/* Enable Mailbox under test */
	ECanbShadow.CANME.all = ECanbRegs.CANME.all;
	ECanbShadow.CANME.bit.ME0 = 1;           //允许邮箱0；
	ECanbRegs.CANME.all = ECanbShadow.CANME.all;

	/* Write to DLC field in Master Control reg */
    ECanbMboxes.MBOX0.MSGCTRL.bit.TPL = 1;
	ECanbMboxes.MBOX0.MSGCTRL.bit.RTR = 0;
	ECanbMboxes.MBOX0.MSGCTRL.bit.DLC = 8;

	/* Write to the MSGID as its MSGID */
	ECanbMboxes.MBOX30.MSGID.all     = 0x91200d00; // 接收地址，接收设置帧
	ECanbMboxes.MBOX31.MSGID.all     = 0x91200f00; // 接收地址，接收查询帧

    ECanbShadow.CANMD.all = ECanbRegs.CANMD.all;
	ECanbShadow.CANMD.bit.MD30 = 1;            	//设置为接受邮箱
	ECanbRegs.CANMD.all = ECanbShadow.CANMD.all;

	ECanbShadow.CANME.all = ECanbRegs.CANME.all;
	ECanbShadow.CANME.bit.ME30= 1;             	//允许邮箱30；
	ECanbRegs.CANME.all = ECanbShadow.CANME.all;

   	ECanbShadow.CANMD.all = ECanbRegs.CANMD.all;
	ECanbShadow.CANMD.bit.MD31 = 1;            	//设置为接受邮箱
	ECanbRegs.CANMD.all = ECanbShadow.CANMD.all;

	/* Enable Mailboxes */
	ECanbShadow.CANME.all = ECanbRegs.CANME.all;
	ECanbShadow.CANME.bit.ME31= 1;           	//允许邮箱31；
	ECanbRegs.CANME.all = ECanbShadow.CANME.all;

	InitCANDATA();
}

void InitCANDATA(void)
{
    CountSystem.CanRst  = 0;
  	CanRxPack.Data1		= 0; 
	CanRxPack.Data2		= 0;
	CanRxPack.Data3		= 0;
	CanRxPack.Data4	    = 0;  
	CanRxPack.Data5	    = 0;
	CanRxPack.Data6	    = 0;
	CanRxPack.Data7	    = 0;
	CanRxPack.Data8		= 0;
} 

void eCAN_Reset(void)
{
   ECanbRegs.CANMC.bit.SRES  =  0;  									//软件复位CAN总线；
   IniteCANB();                     									//初始化CAN总线配置；同时清除初始化接受到的CAN命令数据；
}

/*---------------------------------------------------------------------
函数原型：void eCAN_Send(Uint32 boxID, struct Frame TxPack1)
函数名称：eCAN发送函数
函数功能：邮箱0发送数据
入口参数：boxID---设置发送邮箱ID；TxPack1---8Byte邮箱数据                 
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void eCAN_Send(Uint32 boxID, struct CANFRAME CANTXPACK1)
{
    Uint16  errcnt; 
  	
	ECanbMboxes.MBOX0.MDL.byte.BYTE0    =  CANTXPACK1.Data1;	
	ECanbMboxes.MBOX0.MDL.byte.BYTE1    =  CANTXPACK1.Data2;
    ECanbMboxes.MBOX0.MDL.byte.BYTE2    =  CANTXPACK1.Data3;
    ECanbMboxes.MBOX0.MDL.byte.BYTE3    =  CANTXPACK1.Data4;
	
    ECanbMboxes.MBOX0.MDH.byte.BYTE4    =  CANTXPACK1.Data5;
    ECanbMboxes.MBOX0.MDH.byte.BYTE5    =  CANTXPACK1.Data6;
    ECanbMboxes.MBOX0.MDH.byte.BYTE6    =  CANTXPACK1.Data7;
    ECanbMboxes.MBOX0.MDH.byte.BYTE7    =  CANTXPACK1.Data8;

    ECanbShadow.CANME.all = ECanbRegs.CANME.all;
    ECanbShadow.CANME.bit.ME0= 0;           // Disable mail-box0
    ECanbRegs.CANME.all = ECanbShadow.CANME.all;

	ECanbMboxes.MBOX0.MSGID.all = boxID;

	ECanbShadow.CANME.all = ECanbRegs.CANME.all;
	ECanbShadow.CANME.bit.ME0 = 1;			// enable mail-box0
	ECanbRegs.CANME.all = ECanbShadow.CANME.all;

	/* Begin transmitting */
	ECanbShadow.CANTRS.all 		= ECanbRegs.CANTRS.all;
	ECanbShadow.CANTRS.bit.TRS0 = 1; 		// Set TRS for mailbox under test
	ECanbRegs.CANTRS.all 		= ECanbShadow.CANTRS.all;

	errcnt = 0;
	while(ECanbRegs.CANTA.bit.TA0 == 0)		// Wait for TA0 bit to be set..
	{  
		errcnt++;
	   	if(errcnt > 20000) 
		{
			FlagSysAlarm.bit.CanSendAlarm = 1;
			break;
	   	}
	}

	ECanbShadow.CANTA.all		= ECanbRegs.CANTA.all;
	ECanbShadow.CANTA.bit.TA0	= 1;					// Clear TA0
	ECanbRegs.CANTA.all 		= ECanbShadow.CANTA.all;
}

/*---------------------------------------------------------------------
函数原型：void eCAN_Recv(void)
函数名称：eCAN接受函数
函数功能：邮箱31接收数据
入口参数：无                 
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void CanDataRecv(void)
{
	if(ECanbRegs.CANRMP.bit.RMP31 == 1)     // 回复查询帧
	{
		ECanbRegs.CANRMP.bit.RMP31 = 1; 									// Clear RMPn bits and start
		CountSystem.CanRst = 0;
		FlagSystem.bit.CanSend = 1;
	}
	else
	{
		CountSystem.CanRst++;
		if(CountSystem.CanRst >= 600)
		{
			eCAN_Reset();
		}
	}

	if(ECanbRegs.CANRMP.bit.RMP30 == 1)     // 回复设置帧
	{
		ECanbRegs.CANRMP.bit.RMP30 = 1; 									// Clear RMPn bits and start

		CanRxPack.Data1 =  ECanbMboxes.MBOX30.MDL.byte.BYTE0;				// 0：本地，1：遥控
	    CanRxPack.Data2  = ECanbMboxes.MBOX30.MDL.byte.BYTE1;				// 0：停止，1：启动
	    CanRxPack.Data3  = ECanbMboxes.MBOX30.MDL.byte.BYTE2;				// 0：不动作，1：NO.1路为主电
	    CanRxPack.Data4  = ECanbMboxes.MBOX30.MDL.byte.BYTE3;				// 0：不动作，1：NO.2路为主电
	    CanRxPack.Data5  = ECanbMboxes.MBOX30.MDH.byte.BYTE4;				// 0：不动作，1：查询
	    CanRxPack.Data6  = ECanbMboxes.MBOX30.MDH.byte.BYTE5;
	    CanRxPack.Data7  = ECanbMboxes.MBOX30.MDH.byte.BYTE6;
	    CanRxPack.Data8  = ECanbMboxes.MBOX30.MDH.byte.BYTE7;

	    if((1 == CanRxPack.Data5) && (0 == FlagSystem.bit.XintIOCatch))
	    {
	    	eCAN_Send(0x82100d00, CanTxPack1);
	    	eCAN_Send(0x82100d01, CanTxPack2);
	    }
	}
}

/*---------------------------------------------------------------------
函数原型：void CanDataSave(void)
函数名称：保存CAN数据
函数功能: 
入口参数：无                 
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
#ifdef EQUIPMENT_250A
void CanDataSave(void)
{
	int16 NO1UacInTemp, NO2UacInTemp, NO1CurTemp, NO2CurTemp;
	static Uint16 CountSum = 0, NO1UacIn = 0, NO2UacIn = 0, NO1Cur = 0, NO2Cur = 0;
	static Uint32 SumNO1UacIn = 0, SumNO2UacIn = 0, SumNO1Cur = 0, SumNO2Cur = 0;

	NO1UacInTemp = PwmIsrReg.NO1URms;
	if(NO1UacInTemp < 0)	NO1UacInTemp = 0;
	NO2UacInTemp = PwmIsrReg.NO2URms;
	if(NO2UacInTemp < 0)	NO2UacInTemp = 0;
	NO1CurTemp = PwmIsrReg.NO1IRms;
	if(NO1CurTemp < 0)	NO1CurTemp = 0;
	NO2CurTemp = PwmIsrReg.NO2IRms;
	if(NO2CurTemp < 0)	NO2CurTemp = 0;

	CountSum++;
	if(CountSum <= 256)
	{
	    SumNO1UacIn += NO1UacInTemp;
	    SumNO2UacIn += NO2UacInTemp;
	    SumNO1Cur	+= NO1CurTemp;
	    SumNO2Cur	+= NO2CurTemp;
	}
	else
	{
	    NO1UacIn = ((SumNO1UacIn >> 8) * ParaTable.PowerReg.uNO1PowerVol) >> 12;
	    NO2UacIn = ((SumNO2UacIn >> 8) * ParaTable.PowerReg.uNO2PowerVol) >> 12;
	    NO1Cur = ((SumNO1Cur >> 8) * ParaTable.PowerReg.uNO1PowerCur) >> 12;
	    NO2Cur = ((SumNO2Cur >> 8) * ParaTable.PowerReg.uNO2PowerCur) >> 12;
		SumNO1UacIn = 0;
		SumNO2UacIn = 0;
		SumNO1Cur = 0;
		SumNO2Cur = 0;
		CountSum = 0;
	}

// 状态帧
	CanTxPack1.Data1 = StateSystem.bit.NO1Active				| (StateSystem.bit.NO2Active << 1);
	CanTxPack1.Data2 = FlagSysAlarm.bit.NO1ASCRShort			| (FlagSysAlarm.bit.NO1BSCRShort << 1)		|
					  (FlagSysAlarm.bit.NO1CSCRShort << 2) 		| (FlagSysAlarm.bit.NO1InVolLowAlarm << 3) 	|
					  (FlagSysAlarm.bit.NO1InVolHighAlarm << 4)	| (FlagSysAlarm.bit.NO1InCurHighAlarm << 5)	|
					  (FlagSysAlarm.bit.NO1SPLLAlarm << 6);
	CanTxPack1.Data3 = FlagSysAlarm.bit.NO2ASCRShort			| (FlagSysAlarm.bit.NO2BSCRShort << 1)		|
					  (FlagSysAlarm.bit.NO2CSCRShort << 2) 		| (FlagSysAlarm.bit.NO2InVolLowAlarm << 3) 	|
					  (FlagSysAlarm.bit.NO2InVolHighAlarm << 4)	| (FlagSysAlarm.bit.NO2InCurHighAlarm << 5)	|
					  (FlagSysAlarm.bit.NO2SPLLAlarm << 6);
	CanTxPack1.Data4 = FlagSysAlarm.bit.FroceModeAlarm << 2;
	CanTxPack1.Data5 = FlagSysRunErr.bit.NO1ASCRBroken			| (FlagSysRunErr.bit.NO1BSCRBroken << 1)	|
					  (FlagSysRunErr.bit.NO1CSCRBroken << 2) 	| (FlagSysRunErr.bit.NO1InCurHighCut << 3);
	CanTxPack1.Data6 = FlagSysRunErr.bit.NO2ASCRBroken			| (FlagSysRunErr.bit.NO2BSCRBroken << 1)	|
			  	  	  (FlagSysRunErr.bit.NO2CSCRBroken << 2) 	| (FlagSysRunErr.bit.NO2InCurHighCut << 3);
	CanTxPack1.Data7 = FlagSysRunErr.bit.OverTempCut;
	CanTxPack1.Data8 = 0;

// 数据帧
	CanTxPack2.Data1 = (NO1UacIn  / 10) & 0xff;
	CanTxPack2.Data2 = ((NO1UacIn / 10) >> 8) & 0xff;
	CanTxPack2.Data3 = (NO2UacIn  / 10) & 0xff;
	CanTxPack2.Data4 = ((NO2UacIn / 10) >> 8) & 0xff;
	CanTxPack2.Data5 = (Uint16)(((float)NO1Cur / 10 - 15.986 ) / 0.9584) &  0xff;
	CanTxPack2.Data6 = ((Uint16)(((float)NO1Cur / 10 - 15.986 ) / 0.9584 ) >> 8) & 0xff;
	CanTxPack2.Data7 = (Uint16)(((float)NO2Cur / 10 - 19.675 ) / 0.9699)  & 0xff;
	CanTxPack2.Data8 = ((Uint16)(((float)NO2Cur / 10 - 19.675 ) / 0.9699 ) >> 8)  & 0xff;
}
#endif

#ifdef EQUIPMENT_400A
void CanDataSave(void)
{
    int16 NO1UacInTemp, NO2UacInTemp, NO1CurTemp, NO2CurTemp;
    static Uint16 CountSum = 0, NO1UacIn = 0, NO2UacIn = 0, NO1Cur = 0, NO2Cur = 0;
    static Uint32 SumNO1UacIn = 0, SumNO2UacIn = 0, SumNO1Cur = 0, SumNO2Cur = 0;

    NO1UacInTemp = PwmIsrReg.NO1URms;
    if(NO1UacInTemp < 0)    NO1UacInTemp = 0;
    NO2UacInTemp = PwmIsrReg.NO2URms;
    if(NO2UacInTemp < 0)    NO2UacInTemp = 0;
    NO1CurTemp = PwmIsrReg.NO1IRms;
    if(NO1CurTemp < 0)  NO1CurTemp = 0;
    NO2CurTemp = PwmIsrReg.NO2IRms;
    if(NO2CurTemp < 0)  NO2CurTemp = 0;

    CountSum++;
    if(CountSum <= 256)
    {
        SumNO1UacIn += NO1UacInTemp;
        SumNO2UacIn += NO2UacInTemp;
        SumNO1Cur   += NO1CurTemp;
        SumNO2Cur   += NO2CurTemp;
    }
    else
    {
        NO1UacIn = ((SumNO1UacIn >> 8) * ParaTable.PowerReg.uNO1PowerVol) >> 12;
        NO2UacIn = ((SumNO2UacIn >> 8) * ParaTable.PowerReg.uNO2PowerVol) >> 12;
        NO1Cur = ((SumNO1Cur >> 8) * ParaTable.PowerReg.uNO1PowerCur) >> 12;
        NO2Cur = ((SumNO2Cur >> 8) * ParaTable.PowerReg.uNO2PowerCur) >> 12;
        SumNO1UacIn = 0;
        SumNO2UacIn = 0;
        SumNO1Cur = 0;
        SumNO2Cur = 0;
        CountSum = 0;
    }

// 状态帧
    CanTxPack1.Data1 = StateSystem.bit.NO1Active                | (StateSystem.bit.NO2Active << 1);
    CanTxPack1.Data2 = FlagSysAlarm.bit.NO1ASCRShort            | (FlagSysAlarm.bit.NO1BSCRShort << 1)      |
                      (FlagSysAlarm.bit.NO1CSCRShort << 2)      | (FlagSysAlarm.bit.NO1InVolLowAlarm << 3)  |
                      (FlagSysAlarm.bit.NO1InVolHighAlarm << 4) | (FlagSysAlarm.bit.NO1InCurHighAlarm << 5) |
                      (FlagSysAlarm.bit.NO1SPLLAlarm << 6);
    CanTxPack1.Data3 = FlagSysAlarm.bit.NO2ASCRShort            | (FlagSysAlarm.bit.NO2BSCRShort << 1)      |
                      (FlagSysAlarm.bit.NO2CSCRShort << 2)      | (FlagSysAlarm.bit.NO2InVolLowAlarm << 3)  |
                      (FlagSysAlarm.bit.NO2InVolHighAlarm << 4) | (FlagSysAlarm.bit.NO2InCurHighAlarm << 5) |
                      (FlagSysAlarm.bit.NO2SPLLAlarm << 6);
    CanTxPack1.Data4 = FlagSysAlarm.bit.FroceModeAlarm << 2;
    CanTxPack1.Data5 = FlagSysRunErr.bit.NO1ASCRBroken          | (FlagSysRunErr.bit.NO1BSCRBroken << 1)    |
                      (FlagSysRunErr.bit.NO1CSCRBroken << 2)    | (FlagSysRunErr.bit.NO1InCurHighCut << 3);
    CanTxPack1.Data6 = FlagSysRunErr.bit.NO2ASCRBroken          | (FlagSysRunErr.bit.NO2BSCRBroken << 1)    |
                      (FlagSysRunErr.bit.NO2CSCRBroken << 2)    | (FlagSysRunErr.bit.NO2InCurHighCut << 3);
    CanTxPack1.Data7 = FlagSysRunErr.bit.OverTempCut;
    CanTxPack1.Data8 = 0;

// 数据帧
    CanTxPack2.Data1 = (NO1UacIn  / 10) & 0xff;
    CanTxPack2.Data2 = ((NO1UacIn / 10) >> 8) & 0xff;
    CanTxPack2.Data3 = (NO2UacIn  / 10) & 0xff;
    CanTxPack2.Data4 = ((NO2UacIn / 10) >> 8) & 0xff;
    CanTxPack2.Data5 = (Uint16)(((float)NO1Cur / 10 - 15.986 ) / 0.9584) &  0xff;
    CanTxPack2.Data6 = ((Uint16)(((float)NO1Cur / 10 - 15.986 ) / 0.9584 ) >> 8) & 0xff;
    CanTxPack2.Data7 = (Uint16)(((float)NO2Cur / 10 - 19.675 ) / 0.9699)  & 0xff;
    CanTxPack2.Data8 = ((Uint16)(((float)NO2Cur / 10 - 19.675 ) / 0.9699 ) >> 8)  & 0xff;
}
#endif

/*---------------------------------------------------------------------
函数原型：void CanDataDealInIdlesse(void)
函数名称：系统待机状态下设置运行模式
函数功能:
入口参数：无
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void CanDataDealInIdlesse(void)
{
	// 遥控模式选择
	if (1 == CanRxPack.Data1)
	{
		FlagSystem.bit.RmtMode = 1;
	}
	else if (0 == CanRxPack.Data1)
	{
		FlagSystem.bit.RmtMode = 0;
	}

	// 遥控启动
	if (1 == CanRxPack.Data2)
	{
		FlagSystem.bit.RmtStart = 1;
	}
	else if (0 == CanRxPack.Data2)
	{
		FlagSystem.bit.RmtStart = 0;
	}

	// 主备电优先级选择
	if ((1 == CanRxPack.Data3) && (0 == CanRxPack.Data4))
	{
		FlagSystem.bit.NO1Preferred = 1;
		FlagSystem.bit.NO2Preferred = 0;
	}
	else if ((0 == CanRxPack.Data3) && (1 == CanRxPack.Data4))
	{
		FlagSystem.bit.NO1Preferred = 0;
		FlagSystem.bit.NO2Preferred = 1;
	}
}

/*---------------------------------------------------------------------
函数原型：void CanDataDealInIdlesse(void)
函数名称：系统运行状态下设置设备启停
函数功能:
入口参数：无
出口参数：无
作    者：
日    期：
----------------------------------------------------------------------*/
void CanDataDealInRun(void)
{
	if (1 == CanRxPack.Data2)
	{
		FlagSystem.bit.RmtStart = 1;
	}
	else if (0 == CanRxPack.Data2)
	{
		FlagSystem.bit.RmtStart = 0;
	}
}

//===========================================================================
// End of file.
//===========================================================================

